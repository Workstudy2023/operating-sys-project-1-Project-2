Simulated System Clock Utility

 Overview

This project builds upon a previously designed utility to introduce new functionalities to manage and observe simulated system clock events. The main utility, oss, interacts with multiple worker processes and manages them using a dedicated system clock and a process table. This utility enables users to control and monitor the life cycles of these worker processes based on a custom-defined clock.
Features
•	Simulated System Clock: Independent of the system's main clock, this clock utilizes two integers stored in shared memory representing seconds and nanoseconds. Both are initialized to zero.
•	Process Control Blocks (PCB): Each child process has a PCB maintained by oss. This table contains vital details like the child process' PID, and the time at which the process was forked.
•	worker Processes: These child processes use the simulated system clock to determine their lifespan. Their life duration can be passed as command-line arguments.

Structure

struct PCB { int occupied; // Indicator: True or False pid_t pid; // Process ID of the child int startSeconds; // Timestamp (in seconds) when forked int startNano; // Timestamp (in nanoseconds) when forked }; struct PCB processTable[20]; 
Usage
1.	Launching the main executable (oss):
./oss 
2.	Launching the worker directly (for testing): Pass the lifespan (in seconds and nanoseconds) as command-line arguments.
./worker 5 500000 
In the example above, the worker will determine its exit time based on the sum of the current system clock time and the 5.5 seconds provided.

Dependencies

Ensure you have permissions to create shared memory spaces and are operating in an environment supporting POSIX system calls.
Future Scope
As the project evolves, more functionalities will be integrated to further leverage the simulated system clock and to provide more intricate control over the worker processes.

Future Scope
As the project evolves, more functionalities will be integrated to further leverage the simulated system clock and to provide more intricate control over the worker processes.



* Christine Mckelvey

